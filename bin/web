#!/usr/bin/env node
// Deploying to Zone through FTP loses the node_modules/root symlink.
var Fs = require("fs")
var ROOT_LINK = __dirname + "/../node_modules/root"
if (!Fs.existsSync(ROOT_LINK)) Fs.symlinkSync("..", ROOT_LINK)

var O = require("oolong")
var Url = require("url")
var Http = require("http")
var Express = require("express")
var redirect = require("root/lib/middleware/redirect_middleware")
var PORT = process.env.PORT || 3000
var PUBLIC_DIR = __dirname + "/../public"

var app = module.exports = Express()

app.set("view engine", "jade")
app.locals.pretty = false
app.locals.require = require
app.locals.basedir = app.get("views")

app.use(Express.static(PUBLIC_DIR))
app.use(require("cookie-parser")())
app.use(require("body-parser").urlencoded({extended: true}))
app.use(require("root/lib/middleware/method_override_middleware"))
if (process.env.ENV == "development") app.use(require("morgan")("dev"))

app.use((req, res, next) => { res.locals.req = req; next() })
app.use(require("root/lib/middleware/i18n_middleware"))
app.use(require("root/lib/middleware/session_middleware"))

app.get("/topics", redirect(302, "/"))
app.get("/topics/create1", redirect(302, "/initiatives/new"))
app.get("/votings", redirect(302, "/"))
app.get("/discussions", redirect(302, "/"))
app.get("/goodpractice", redirect(302, "/about"))
app.get("/topics/:id", redirect(302, "/initiatives/:id"))
app.get("/topics/:id/discussion", redirect(302, "/initiatives/:id/discussion"))
app.get("/topics/:id/vote", redirect(302, "/initiatives/:id/vote"))
app.get("/topics/:id/events", redirect(302, "/initiatives/:id/events"))
app.get("/topics/:id/votes/*", redirect(302, "/initiatives/:id/vote"))
app.get("/support_us", redirect(302, "/support"))

O.each({
	"/": require("root/controllers/home_controller").router,
	"/initiatives": require("root/controllers/initiatives_controller").router,
	"/session": require("root/controllers/session_controller").router,
}, (router, path) => app.use(path, router))

app.use(function(req, res, next) {
  res.sendFile("app.html", {root: PUBLIC_DIR})
})

app.use(require("root/lib/middleware/error_middleware"))

if (module.parent) return

Http.createServer(app).listen(PORT, function() {
  var addr = this.address()

  console.log("Listening on %s.", typeof addr == "string" ? addr : Url.format({
    protocol: "http", hostname: addr.address, port: addr.port
  }))
})
