#!/usr/bin/env node
var O = require("oolong")
var Fs = require("fs")
var Url = require("url")
var Http = require("http")
var Path = require("path")
var Jade = require("jade")
var Express = require("express")
var Config = require("root/config")
var HttpError = require("standard-http-error")
var redirect = require("root/lib/redirect")
var reportError = require("root").errorReporter
var ENV = process.env.ENV
var PORT = process.env.PORT || 3000
var PUBLIC_DIR = __dirname + "/../public"
var FONT_SUFFIXES = [".eot", ".woff", ".woff2", ".ttf", ".svg"]
var ERR_TEMPLATES = {401: "401", 404: "404", 412: "412", 500: "500", 503: "503"}

var app = module.exports = Express()

app.enable("trust proxy", "loopback")
app.set("view engine", "jade")
app.locals.pretty = false
app.locals.require = require
app.locals.basedir = app.get("views")
Jade.filters.javascript = require("root/lib/jade/javascript_filter")

app.use(Express.static(PUBLIC_DIR, {setHeaders: setStaticHeaders}))

switch (ENV) {
	case "development":
	case "staging":
		app.use(require("morgan")("dev"))
		break
}

app.use((req, res, next) => { res.locals.req = req; next() })
app.use(require("cookie-parser")(Config.cookieSecret))
app.use(require("body-parser").urlencoded({extended: true}))
app.use(require("root/lib/middleware/method_override_middleware"))
app.use(require("root/lib/middleware/accept_middleware"))
app.use(require("root/lib/middleware/i18n_middleware"))
app.use(require("root/lib/middleware/csrf_middleware"))
app.use(require("flash-fiction/express"))

app.use(require("root/lib/middleware/maintenance_middleware"))
app.use(require("root/lib/middleware/session_middleware"))
app.use(require("root/lib/middleware/api_middleware"))

O.each({
	"/topics": "/",
	"/topics/create1": "/initiatives/new",
	"/votings": "/",
	"/discussions": "/",
	"/goodpractice": "/about",
	"/topics/:id": "/initiatives/:id",
	"/topics/:id/discussion": "/initiatives/:id/discussion",
	"/topics/:id/vote": "/initiatives/:id",
	"/topics/:id/events": "/initiatives/:id/events",
	"/topics/:id/events/create": "/initiatives/:id/events/new",
	"/initiatives/:id/events/create": "/initiatives/:id/events/new",
	"/topics/:id/votes/*": "/initiatives/:id",
	"/initiatives/:id/discussion": "/initiatives/:id",
	"/initiatives/:id/vote": "/initiatives/:id",
	"/initiatives/:id/events": "/initiatives/:id",
	"/support_us": "/donate",
}, (to, from) => app.get(from, redirect(302, to)))

O.each({
	"/": require("root/controllers/home_controller").router,
	"/donations": require("root/controllers/donations_controller").router,
	"/initiatives": require("root/controllers/initiatives_controller").router,
	"/session": require("root/controllers/session_controller").router,
	"/user": require("root/controllers/user_controller").router,
}, (router, path) => app.use(path, router))

app.use(function(_req, _res, next) { next(new HttpError(404)) })

app.use(function(err, req, _res, next) {
	if (!(err instanceof HttpError)) reportError(err, req)
	if (err instanceof HttpError && err.code === 412) reportError(err, req)
	next(err)
})

app.use(function(err, req, res, next) {
	// Stop handling here if there was an error, but it's been responded to
	// already. That happens when you want to still report the error to Sentry,
	// but have displayed something to the user.
	if (res.headersSent) return

	if (err instanceof HttpError) {
		res.statusCode = err.code
		res.statusMessage = err.message
		res.render(ERR_TEMPLATES[err.code] || ERR_TEMPLATES[500], {error: err})
		return
	}

	// The final Express handler in dev/tests doesn't seem to overwrite status
	// with 500 if it's set to anything. Ensure it's 500.
	res.statusCode = 500
	if (ENV === "development" || ENV === "test") return void next(err)
	res.render(ERR_TEMPLATES[500], {error: {message: req.t("MSG_ERROR_50000")}})
})

if (module.parent) return

Http.createServer(app).listen(PORT, function() {
  // Make world-writable to allow the web server to read and write to it.
  if (!isFinite(PORT)) Fs.chmodSync(PORT, 0o777)
	var addr = this.address()

	console.log("Listening on %s.", typeof addr == "string" ? addr : Url.format({
		protocol: "http", hostname: addr.address, port: addr.port
	}))
})

function setStaticHeaders(res, path) {
	if (isCorsable(path)) res.setHeader("Access-Control-Allow-Origin", "*")
}

function isCorsable(path) {
	path = Path.relative(PUBLIC_DIR, path)
	if (FONT_SUFFIXES.some((s) => path.endsWith(s))) return true

	switch (path) {
		case "assets/etherpad.css": return true
		default: return false
	}
}
