mixin initiatives(initiatives)
	ol.initiatives
		for initiative in initiatives
			+initiative(initiative)

mixin initiative(initiative)
	-
		var I18n = require("root/lib/i18n")
		var Config = require("root/config")
		var PARTNERS = Config.partners
		var createdAt = new Date(initiative.createdAt)
		var partner = PARTNERS[initiative.sourcePartnerId]

	li.initiative
		a(href=`/initiatives/${initiative.id}`)
			time(datetime=initiative.createdAt)= I18n.formatDate("numeric", createdAt)
			h3= initiative.title

			if partner
				img.badge(src=partner.badge)

			span.author= initiative.creator.name
			+progress(initiative)

mixin progress(initiative)
	-
		var Initiative = require("root/lib/initiative")
		var Css = require("root/lib/css")
		var Config = require("root/config")
		var DateFns = require("date-fns")
		var VOTES_REQUIRED = Config.votesRequired
		var createdAt = new Date(initiative.createdAt)
		var endsAt = new Date(initiative.endsAt)

		var klass
		switch (initiative.status) {
			case "inProgress": klass = "discussable"; break
			case "voting": klass = "votable"; break
			case "followUp": klass = "processable"; break
			case "closed": klass = "finished"; break
		}

	case initiative.status
		when "inProgress"
			if initiative.visibility == "private"
				.initiative-progress.private(class=klass)
					= t("TXT_TOPIC_VISIBILITY_PRIVATE")
			else if !Initiative.hasDiscussionEnded(new Date, initiative)
				- var passed = DateFns.differenceInDays(new Date, createdAt)
				- var total = DateFns.differenceInDays(endsAt, createdAt)
				- var left = total - passed

				.initiative-progress(
					class=klass,
					style=Css.linearBackground("#ffb400", passed / total))
					= t("TXT_DEADLINE_CALENDAR_DAYS_LEFT", {numberOfDaysLeft: left})
			else
				.initiative-progress.completed(class=klass)= t("DISCUSSION_FINISHED")
			
		when "voting"
			- var sigs = Initiative.countSignatures("Yes", initiative)

			if Initiative.isSuccessful(initiative)
				.initiative-progress.completed(class=klass)
					= t("N_SIGNATURES_COLLECTED", {votes: sigs})
			else if !Initiative.hasVoteEnded(new Date, initiative)
				.initiative-progress(
					class=klass,
					style=Css.linearBackground("#00cb81", sigs / VOTES_REQUIRED))
					= t("N_SIGNATURES", {votes: sigs})
			else
				.initiative-progress.failed(class=klass)
					= t("N_SIGNATURES_FAILED", {votes: sigs})

		when "followUp"
		when "closed"
			- var signatures = Initiative.countSignatures("Yes", initiative)
			.initiative-progress(class=klass)= t("N_SIGNATURES", {votes: signatures})

mixin header(initiative)
	header
		span.author
			= t("CREATED_BY")
			| &#32;
			= initiative.creator.name

		h1= initiative.title

mixin initiative-aux-menu(initiative)
	-
		var Initiative = require("root/lib/initiative")

		var showMenu = (
			Initiative.canUpdateDiscussionDeadline(initiative) ||
			Initiative.canUpdateVoteDeadline(initiative) ||
			Initiative.isDeletable(initiative)
		)

	if showMenu
		menu#initiative-aux-menu
			h3= t("OPTIONS")

			if Initiative.canUpdateDiscussionDeadline(initiative)
				+form(method="post", action="/initiatives/#{initiative.id}")
					input(type="hidden", name="_method", value="put")
					button.button.white-button(name="visibility", value="public")
						= t("RENEW_DEADLINE")

			if Initiative.canUpdateVoteDeadline(initiative)
				+form(method="post", action="/initiatives/#{initiative.id}")
					input(type="hidden", name="_method", value="put")
					button.button.white-button(name="status", value="voting")
						= t("RENEW_DEADLINE")

			if Initiative.isDeletable(initiative)
				+form(method="post", action="/initiatives/#{initiative.id}")
					- var confirmText = t("TXT_ALL_DISCUSSIONS_AND_VOTES_DELETED")
					button.button.white-button(
						name="_method",
						value="delete",
						onclick="return confirm('#{confirmText}')")
						= t("BTN_DELETE_TOPIC")

mixin initiative-subscribe(initiative)
	- var Initiative = require("root/lib/initiative")

	if Initiative.isPublic(initiative)
		+form#initiative-subscribe(
			action="https://docs.google.com/forms/d/e/1FAIpQLScP706DtEaSwnt8GYvgw30KOWvdfl7DBhjwyW82V0IesDrx0g/formResponse",
			target="_blank",
			method="POST")
			h3= t("WANT_TO_KEEP_INFORMED_ABOUT_FURTHER_PROGRESS")

			input(name="entry.1310039861", type="hidden", value=initiative.id)
			input(name="entry.426608193", type="hidden", value=initiative.title)
			input(name="fbzx", value="-7339236801065826742", type="hidden")

			input#initiative-subscribe-email.form-input(
				name="entry.120482688",
				type="email",
				placeholder=t("LBL_EMAIL"))

			button.secondary-button(type="submit")= t("BTN_SUBSCRIBE")

mixin comments(comments, editedComment)
	- var I18n = require("root/lib/i18n")
	- var linkify = require("root/lib/linkify")
	- var commentsUrl = `/initiatives/${initiative.id}/comments`

	#initiative-comments
		h2= t("COMMENT_HEADING")

		if flash("commentError")
			p.flash.error= flash("commentError")

		ol.comments
			for comment in comments
				- var name = comment.creator.name
				- var isEdited = editedComment.parentId === comment.id

				li.comment(id=`comment-${comment.id}`)
					span.author= name
					| &#32;
					time(datetime=comment.createdAt)
						a(href=`#comment-${comment.id}`)
							= I18n.formatTime("numeric", comment.createdAt)

					h3.subject= comment.subject
					p.text!= linkify(comment.text)

					if req.user
						a.reply-button.white-button(href=`#comment-${comment.id}-reply`)
							= t("REPLY")

					ol.replies
						for reply in comment.replies
							li.reply(id=`comment-${reply.id}`)
								span.author= reply.creator.name
								| &#32;
								time(datetime=reply.createdAt)
									a(href=`#comment-${reply.id}`)
										= I18n.formatTime("numeric", reply.createdAt)

								p.text!= linkify(reply.text)

					if req.user
						+form.reply-form(
							id=`comment-${comment.id}-reply`,
							method="post",
							action=`${commentsUrl}/${comment.id}/replies`,
							hidden=!isEdited)

							textarea.form-textarea(
								name="text",
								maxlength=2048,
								required,
								placeholder=t("PLACEHOLDER_ADD_YOUR_REPLY", {name: name}))
								= isEdited ? editedComment.text : null

							button.secondary-button= t("POST_REPLY")

		//- Comment form anchor used for redirecting to error.
		+form#initiative-comment-form.comment-form(
			method="post",
			action=commentsUrl)
			input.form-input(
				name="subject",
				value=editedComment.parentId == null ? editedComment.subject : null,
				maxlength=128,
				required,
				placeholder=t("PLACEHOLDER_ADD_ARGUMENT_SUBJECT"),
				disabled=!req.user)

			textarea.form-textarea(
				name="text",
				maxlength=2048,
				required,
				placeholder=t("PLACEHOLDER_ADD_ARGUMENT_TEXT"),
				disabled=!req.user)
				= editedComment.parentId == null ? editedComment.text : null

			button.secondary-button(disabled=!req.user)= t("POST_COMMENT")

			if !req.user
				span.text.signin-to-act
					!= t("TXT_TOPIC_COMMENT_LOG_IN_TO_PARTICIPATE", {url: "/session/new"})

mixin date-picker(selector)
	- var _ = require("lodash")
	- var id = _.uniqueId("date-picker-")

	.form-date-picker(id=id)
		:javascript
			var Pikaday = require("pikaday")
			var input = document.querySelector("#{selector}")

			new Pikaday({
				firstDay: 1,
				field: input,
				minDate: input.min ? new Date(input.min) : null,
				maxDate: input.max ? new Date(input.max) : null,
				container: document.getElementById("#{id}"),
				bound: false,
			})
