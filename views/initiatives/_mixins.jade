mixin initiatives(initiatives, dbInitiatives)
	ol.initiatives
		for initiative in initiatives
			+initiative(initiative, dbInitiatives[initiative.id])

mixin initiative(initiative, dbInitiative)
	-
		var _ = require("lodash")
		var I18n = require("root/lib/i18n")
		var Config = require("root/config")
		var createdAt = initiative.createdAt
		var partner = Config.partners[initiative.sourcePartnerId]
		var category = _.values(_.pick(Config.categories, initiative.categories))[0]
		var badge = partner || category

	li.initiative
		a(href=`/initiatives/${initiative.id}`)
			time(datetime=createdAt.toJSON())= I18n.formatDate("numeric", createdAt)
			h3= initiative.title

			if badge
				img.badge(src=badge.icon)

			span.author= initiative.creator.name
			+progress(initiative, dbInitiative)

mixin progress(initiative, dbInitiative)
	-
		var Initiative = require("root/lib/initiative")
		var Css = require("root/lib/css")
		var Config = require("root/config")
		var DateFns = require("date-fns")
		var formatDate = require("root/lib/i18n").formatDate
		var VOTES_REQUIRED = Config.votesRequired

		var unclosedStatus = Initiative.getUnclosedStatus(initiative)
		var createdAt = initiative.createdAt
		var endsAt = new Date(initiative.endsAt)

		var klass = {
			inProgress: "discussable",
			voting: "votable",
			followUp: "processable"
		}[unclosedStatus]

	case unclosedStatus
		when "inProgress"
			if initiative.visibility == "private"
				.initiative-progress.private(class=klass)
					= t("TXT_TOPIC_VISIBILITY_PRIVATE")
			else if !Initiative.hasDiscussionEnded(new Date, initiative)
				- var passed = DateFns.differenceInCalendarDays(new Date, createdAt)
				- var total = Initiative.daysInDiscussion(initiative)
				- var left = total - passed

				.initiative-progress(
					class=klass,
					style=Css.linearBackground("#ffb400", passed / total))
					= t("TXT_DEADLINE_CALENDAR_DAYS_LEFT", {numberOfDaysLeft: left})
			else
				.initiative-progress.completed(class=klass)= t("DISCUSSION_FINISHED")
			
		when "voting"
			- var sigs = Initiative.countSignatures("Yes", initiative)

			if Initiative.isSuccessful(initiative)
				.initiative-progress.completed(class=klass)
					= t("N_SIGNATURES_COLLECTED", {votes: sigs})
			else if !Initiative.hasVoteEnded(new Date, initiative)
				.initiative-progress(
					class=klass,
					style=Css.linearBackground("#00cb81", sigs / VOTES_REQUIRED))
					= t("N_SIGNATURES", {votes: sigs})
			else
				.initiative-progress.failed(class=klass)
					= t("N_SIGNATURES_FAILED", {votes: sigs})

		when "followUp"
			-
				var klass = initiative.status == "closed" ? "finished" : "processable"
				var sigs = Initiative.countSignatures("Yes", initiative)

				var date = dbInitiative == null
					? null
					: initiative.status == "closed"
					? dbInitiative.finished_in_parliament_at
					: dbInitiative.sent_to_parliament_at

			.initiative-progress(class=klass)
				if date
					= t("N_SIGNATURES_WITH_DATE", {date: formatDate("numeric", date), votes: sigs})
				else
					= t("N_SIGNATURES", {votes: sigs})

mixin quicksign(initiative)
	if Initiative.isPublic(initiative)
		.quicksign
			+progress(initiative)

			if Initiative.isVotable(now, initiative)
				if !hasVote
					a.primary-button.wide-button.sign-button(
						href="#initiative-vote")
						= t("SIGN_THIS_DOCUMENT")
				else
					a.white-button.wide-button.revoke-button(
						href="#initiative-vote")
						= t("REVOKE_SIGNATURE")

			+progress-text(initiative)

mixin progress-text(initiative)
	-
		var Initiative = require("root/lib/initiative")
		var Config = require("root/config")
		var I18n = require("root/lib/i18n")

	if initiative.status == "voting"
		- var sigs = Initiative.countSignatures("Yes", initiative)

		p.initiative-progress-text
			span
				if sigs >= Config.votesRequired
					= t("SIGNATURES_COLLECTED")
				else
					- var missing = Config.votesRequired - sigs
					!= t("MISSING_N_SIGNATURES", {signatures: missing})

			= " "
			span
				= t("VOTING_DEADLINE")
				= ": "
				- var endsAt = I18n.formatTime("numeric", initiative.vote.endsAt)
				time.deadline(datetime=initiative.vote.endsAt)= endsAt
				| .

	else if initiative.status == "inProgress"
		p.initiative-progress-text
			span
				= t("DISCUSSION_DEADLINE")
				= ": "
				- var endsAt = I18n.formatTime("numeric", initiative.endsAt)
				time(datetime=initiative.endsAt)= endsAt

mixin initiative-subscribe(initiative)
	- var Initiative = require("root/lib/initiative")

	if Initiative.isPublic(initiative)
		+form#initiative-subscribe(
			method="post",
			action="/initiatives/#{initiative.id}/subscriptions")
			h3= t("WANT_TO_KEEP_INFORMED_ABOUT_FURTHER_PROGRESS")

			input#initiative-subscribe-email.form-input(
				name="email",
				type="email",
				required,
				placeholder=t("LBL_EMAIL"))

			button.secondary-button(type="submit")= t("BTN_SUBSCRIBE")

mixin comment(comment, editedComment)
	- var Initiative = require("root/lib/initiative")
	- var Comment = require("root/lib/comment")
	- var I18n = require("root/lib/i18n")
	- var name = comment.creator.name
	- var isEdited = editedComment.parentId === comment.id
	- var commentUrl = `/initiatives/${initiative.id}/comments/${comment.id}`

	span.author= name
	| &#32;
	time(datetime=comment.createdAt)
		a(href=commentUrl)
			= I18n.formatTime("numeric", comment.createdAt)

	h3.subject: a(href=commentUrl)= comment.subject
	p.text!= Comment.htmlify(comment.text)

	if req.user
		a.comment-reply-button.white-button(href=`#comment-${comment.id}-reply`)
			= t("REPLY")

	ol.comment-replies
		for reply in comment.replies
			li.comment-reply(
				id=`comment-${reply.id}`,
				class=Initiative.isCommentShort(reply) ? "short" : "")
				span.author= reply.creator.name
				| &#32;
				time(datetime=reply.createdAt)
					a(href=commentUrl + `#comment-${reply.id}`)
						= I18n.formatTime("numeric", reply.createdAt)

				p.text!= Comment.htmlify(reply.text)

	if req.user
		+form.comment-reply-form(
			id=`comment-${comment.id}-reply`,
			method="post",
			action=commentUrl + "/replies",
			hidden=!isEdited)
			textarea.form-textarea(
				name="text",
				maxlength=2048,
				required,
				placeholder=t("PLACEHOLDER_ADD_YOUR_REPLY", {name: name}))
				= isEdited ? editedComment.text : null

			button.secondary-button= t("POST_REPLY")

mixin date-picker(selector)
	- var _ = require("lodash")
	- var id = _.uniqueId("date-picker-")

	.form-date-picker(id=id)
		:javascript
			var Pikaday = require("pikaday")
			var input = document.querySelector("#{selector}")

			new Pikaday({
				firstDay: 1,
				field: input,
				minDate: input.min ? new Date(input.min) : null,
				maxDate: input.max ? new Date(input.max) : null,
				container: document.getElementById("#{id}"),
				bound: false,
			})

mixin initiative-badge(initiative)
	-
		var _ = require("lodash")
		var Config = require("root/config")
		var partner = Config.partners[initiative.sourcePartnerId]
		var category = _.values(_.pick(Config.categories, initiative.categories))[0]
		var badge = partner || category

	if badge
		if badge.url
			a.badge(href=badge.url, title=badge.name)
				img.badge(src=badge.icon, alt=badge.name)
		else
			img.badge(src=badge.icon, alt=badge.name, title=badge.name)
