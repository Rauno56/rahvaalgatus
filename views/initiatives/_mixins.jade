mixin initiatives(initiatives)
	ol.initiatives
		for initiative in initiatives
			+initiative(initiative)

mixin initiative(initiative)
	-
		var I18n = require("root/lib/i18n")
		var createdAt = new Date(initiative.createdAt)

	li.initiative
		a(href=`/initiatives/${initiative.id}`)
			time(datetime=initiative.createdAt)= I18n.formatDate("numeric", createdAt)
			h3= initiative.title
			span.author= initiative.creator.name
			+progress(initiative)

mixin progress(initiative)
	-
		var Initiative = require("root/lib/initiative")
		var Css = require("root/lib/css")
		var Config = require("root/config")
		var DateFns = require("date-fns")
		var createdAt = new Date(initiative.createdAt)
		var endsAt = new Date(initiative.endsAt)

		var klass
		switch (initiative.status) {
			case "inProgress": klass = "discussable"; break
			case "voting": klass = "votable"; break
			case "followUp": klass = "processable"; break
		}

	case initiative.status
		when "inProgress"
			if initiative.visibility == "private"
				.initiative-progress.private(class=klass)
					= t("TXT_TOPIC_VISIBILITY_PRIVATE")
			else if !Initiative.hasDiscussionEnded(new Date, initiative)
				- var passed = DateFns.differenceInDays(new Date, createdAt)
				- var total = DateFns.differenceInDays(endsAt, createdAt)
				- var left = total - passed

				.initiative-progress(
					class=klass,
					style=Css.linearBackground("#ffb400", passed / total))
					= t("TXT_DEADLINE_CALENDAR_DAYS_LEFT", {numberOfDaysLeft: left})
			else
				.initiative-progress.completed(class=klass)= t("DISCUSSION_FINISHED")
			
		when "voting"
			- var sigs = Initiative.countSignatures("Yes", initiative)
			- var required = Config.votesRequired

			if Initiative.isSuccessful(initiative)
				.initiative-progress.completed(class=klass)
					= t("N_SIGNATURES_COLLECTED", {votes: sigs})
			else if !Initiative.hasVoteEnded(new Date, initiative)
				.initiative-progress(
					class=klass,
					style=Css.linearBackground("#00cb81", sigs / required))
					= t("N_SIGNATURES", {votes: sigs})
			else
				.initiative-progress.failed(class=klass)
					= t("N_SIGNATURES_FAILED", {votes: sigs})

		when "followUp"
			- var signatures = Initiative.countSignatures("Yes", initiative)
			.initiative-progress(class=klass)= t("N_SIGNATURES", {votes: signatures})

mixin header(initiative)
	header
		span.author
			= t("CREATED_BY")
			| &#32;
			= initiative.creator.name

		h1= initiative.title

mixin comments(comments, editedComment)
	- var I18n = require("root/lib/i18n")
	- var linkify = require("root/lib/linkify")
	- var commentsUrl = `/initiatives/${initiative.id}/comments`

	section#initiative-comments.secondary-section: center
		h2= t("COMMENT_HEADING")

		if flash("commentError")
			p.flash.error= flash("commentError")

		ol.comments
			for comment in comments
				- var isEdited = editedComment.parentId === comment.id

				li.comment(id=`comment-${comment.id}`)
					span.author= comment.creator.name
					| &#32;
					time(datetime=comment.createdAt)
						a(href=`#comment-${comment.id}`)
							= I18n.formatTime("numeric", comment.createdAt)

					h3.subject= comment.subject
					p.text!= linkify(comment.text)

					if req.user
						a.reply-button.link-button(href=`#comment-${comment.id}-reply`)
							= t("REPLY")

					ol.replies
						for reply in comment.replies
							li.reply(id=`comment-${reply.id}`)
								span.author= reply.creator.name
								| &#32;
								time(datetime=reply.createdAt)
									a(href=`#comment-${reply.id}`)
										= I18n.formatTime("numeric", reply.createdAt)

								p.text!= linkify(reply.text)

					if req.user
						+form.reply-form(
							id=`comment-${comment.id}-reply`,
							method="post",
							action=`${commentsUrl}/${comment.id}/replies`,
							hidden=!isEdited)

							textarea.form-textarea(
								name="text",
								maxlength=2048,
								required,
								placeholder=t("PLACEHOLDER_ADD_ARGUMENT_TEXT"))
								= isEdited ? editedComment.text : null

							button.secondary-button= t("POST_COMMENT")

		//- Comment form anchor used for redirecting to error.
		+form#initiative-comment-form.comment-form(
			method="post",
			action=commentsUrl)
			if req.user
				input.form-input(
					name="subject",
					value=editedComment.parentId == null ? editedComment.subject : null,
					maxlength=128,
					placeholder=t("PLACEHOLDER_ADD_ARGUMENT_SUBJECT"))

				textarea.form-textarea(
					name="text",
					maxlength=2048,
					required,
					placeholder=t("PLACEHOLDER_ADD_ARGUMENT_TEXT"))
					= editedComment.parentId == null ? editedComment.text : null

				button.secondary-button= t("POST_COMMENT")

			else
				p= t("TXT_TOPIC_COMMENT_LOG_IN_TO_PARTICIPATE")

mixin date-picker(selector)
	- var _ = require("lodash")
	- var id = _.uniqueId("date-picker-")

	.form-date-picker(id=id)
		:javascript
			var Pikaday = require("pikaday")
			var input = document.querySelector("#{selector}")

			new Pikaday({
				firstDay: 1,
				field: input,
				minDate: input.min ? new Date(input.min) : null,
				maxDate: input.max ? new Date(input.max) : null,
				container: document.getElementById("#{id}"),
				bound: false,
			})
